Description de l‚ÄôApplication
============================
----

Bienvenue √† l‚Äôapplication de Surveillance Intelligente
======================================================

Bienvenue dans cette application  de **Surveillance Intelligente**‚ÄØ!  
Cette solution a √©t√© con√ßue pour combiner plusieurs mod√®les d‚Äôintelligence artificielle afin d‚Äôassurer la s√©curit√© et la vigilance en temps r√©el.  
Avec elle, vous pouvez d√©tecter les chutes, pr√©dire les risques de chute, surveiller la somnolence, ou combiner tout cela en un seul √©cran.

Nous allons vous guider √† travers les principales fonctionnalit√©s, l‚Äôarchitecture, et m√™me vous montrer le c≈ìur du code qui fait tourner cette application.

----

Fonctionnalit√©s principales
---------------------------

- **D√©tection de chutes** avec YOLOv5 : d√©tecte instantan√©ment si une chute est en train de se produire devant la cam√©ra.
- **Pr√©diction de chutes** avec TensorFlow : analyse les s√©quences pour anticiper si une chute pourrait arriver.
- **D√©tection de somnolence** : surveille si une personne montre des signes de fatigue.
- **Mode combin√©** : regroupe les trois mod√®les pour une surveillance compl√®te.
- **Interface Streamlit** : une interface web √©l√©gante et interactive.
- **Alertes critiques** : d√©clench√©es si plusieurs mod√®les d√©tectent un probl√®me.
- **Affichage en direct** : flux vid√©o annot√© avec textes explicatifs et taux de FPS.
- **Configuration utilisateur** : choix des modes, seuil d‚Äôalerte, d√©marrage/arr√™t de la surveillance.

----

Structure g√©n√©rale
------------------

L‚Äôapplication utilise les biblioth√®ques suivantes‚ÄØ:
- Streamlit pour l‚Äôinterface utilisateur.
- OpenCV pour capturer et traiter les flux vid√©o.
- PyTorch (YOLOv5) pour la d√©tection temps r√©el.
- TensorFlow pour les mod√®les pr√©dictifs et de somnolence.
- PIL (Pillow) pour dessiner les textes avec accents sur les images.

----

Contenu du code principal
-------------------------

Voici le c≈ìur du code Python avec explications et commentaires int√©gr√©s.

.. code-block:: python

    import streamlit as st
    import torch
    import cv2
    import tensorflow as tf
    import numpy as np
    from tensorflow.keras.layers import (
        BatchNormalization, Conv2D, MaxPooling2D, Dense,
        Flatten, Dropout, Activation
    )
    import time
    from PIL import Image, ImageDraw, ImageFont

    # Configuration de la page
    st.set_page_config(
        layout="wide",
        page_title="Surveillance Intelligente",
        page_icon="üëÅÔ∏è"
    )

    # Patch pour √©viter les erreurs avec torch.classes dans Streamlit
    if not hasattr(torch.classes, "__path__"):
        torch.classes.__path__ = []

    # Injecter du CSS personnalis√© pour styliser l‚Äôinterface
    def inject_custom_css():
        st.markdown(\"\"\"
        <style>
            .stApp {
                background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            }
            .stButton>button {
                border: 2px solid #4a90e2;
                border-radius: 20px;
                color: white;
                background: linear-gradient(45deg, #4a90e2, #8b6df2);
                padding: 10px 24px;
                margin: 10px 0;
                width: 100%;
                transition: all 0.3s ease;
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            }
            .stButton>button:hover {
                transform: translateY(-3px);
                box-shadow: 0 6px 8px rgba(0,0,0,0.15);
                background: linear-gradient(45deg, #3a7bd5, #7b5dd3);
            }
        </style>
        \"\"\", unsafe_allow_html=True)

    inject_custom_css()

    st.title("üëÅÔ∏è Syst√®me de Surveillance Intelligente")

    # Fonction pour dessiner du texte fran√ßais avec accents
    def draw_french_text(img, text, position, font_scale=0.7, color=(255, 255, 255), thickness=2):
        img_pil = Image.fromarray(img)
        draw = ImageDraw.Draw(img_pil)
        try:
            font_size = int(font_scale * 30)
            try:
                font = ImageFont.truetype("arial.ttf", font_size)
            except:
                try:
                    font = ImageFont.truetype("DejaVuSans.ttf", font_size)
                except:
                    font = ImageFont.load_default()
        except:
            font = ImageFont.load_default()
        if isinstance(color, tuple) and len(color) == 3:
            color = color[::-1]
        draw.text(position, text, font=font, fill=color)
        return np.array(img_pil)

    # Custom BatchNormalization pour compatibilit√© Keras
    class FixedBatchNormalization(BatchNormalization):
        @classmethod
        def from_config(cls, config):
            if isinstance(config.get('axis'), list):
                config['axis'] = config['axis'][0]
            return super().from_config(config)

    # Chargement des mod√®les
    @st.cache_resource
    def load_models():
        fall_detection = torch.hub.load(
            'ultralytics/yolov5', 'custom',
            path='path_to_yolov5_weights.pt',
            force_reload=True
        )
        fall_prediction = tf.keras.models.load_model(
            'path_to_fall_prediction_model.keras',
            custom_objects={"BatchNormalization": FixedBatchNormalization}
        )
        drowsiness = tf.keras.models.load_model(
            'path_to_drowsiness_model.keras',
            custom_objects={"BatchNormalization": FixedBatchNormalization}
        )
        return fall_detection, fall_prediction, drowsiness

    fall_detection_model, fall_prediction_model, drowsiness_model = load_models()

    # Interface utilisateur
    if 'run_detection' not in st.session_state:
        st.session_state.run_detection = False

    st.sidebar.header("Configuration")
    with st.sidebar:
        model_choice = st.radio(
            "Mode de surveillance",
            ["D√©tection Chute", "Pr√©diction Chute", "D√©tection Somnolence", "Surveillance Combin√©e"],
            index=3
        )
        alert_threshold = st.slider("Seuil d'alerte", 1, 3, 2)
        if st.button(" D√©marrer la surveillance"):
            st.session_state.run_detection = True
        if st.button(" Arr√™ter"):
            st.session_state.run_detection = False

    video_placeholder = st.empty()
    status_text = st.empty()

    if st.session_state.run_detection:
        cap = cv2.VideoCapture(0)
        last_time = time.time()

        while st.session_state.run_detection:
            ret, frame = cap.read()
            if not ret:
                status_text.warning("Probl√®me de flux vid√©o")
                break

            current_time = time.time()
            fps = 1 / (current_time - last_time)
            last_time = current_time

            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            if model_choice == "D√©tection Chute":
                results = fall_detection_model(frame)
                annotated_frame = results.render()[0]
                annotated_frame = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)

            elif model_choice == "Pr√©diction Chute":
                img = cv2.resize(frame_rgb, (128, 128)) / 255.0
                preds = fall_prediction_model.predict(
                    np.expand_dims(np.repeat(img[np.newaxis], 30, axis=0), axis=0), verbose=0)
                label = " Risque de chute!" if preds[0][0] > 0.5 else "‚úÖ Stable"
                annotated_frame = draw_french_text(frame_rgb, label, (50, 50), font_scale=1,
                                                  color=(0, 255, 255) if preds[0][0] <= 0.5 else (0, 0, 255))

            elif model_choice == "D√©tection Somnolence":
                img = cv2.resize(frame_rgb, (145, 145)) / 255.0
                preds = drowsiness_model.predict(img[np.newaxis], verbose=0)
                label = " Somnolence d√©tect√©e!" if preds[0][0] > 0.5 else " √âveill√©"
                color = (0, 0, 255) if preds[0][0] > 0.5 else (0, 255, 0)
                annotated_frame = draw_french_text(frame_rgb, label, (50, 50), font_scale=1, color=color)

            else:
                # Mode combin√©
                results = fall_detection_model(frame)
                fall_detected = any(
                    [res['name'] == 'fall' for res in results.pandas().xyxy[0].to_dict(orient='records')])
                fall_confidence = max(
                    [res['confidence'] for res in results.pandas().xyxy[0].to_dict(orient='records') if res['name'] == 'fall'],
                    default=0)

                img_fall = cv2.resize(frame_rgb, (128, 128)) / 255.0
                preds_fall = fall_prediction_model.predict(
                    np.expand_dims(np.repeat(img_fall[np.newaxis], 30, axis=0), axis=0), verbose=0)
                fall_predicted = preds_fall[0][0] > 0.5

                img_drowsy = cv2.resize(frame_rgb, (145, 145)) / 255.0
                preds_drowsy = drowsiness_model.predict(img_drowsy[np.newaxis], verbose=0)
                drowsiness_detected = preds_drowsy[0][0] > 0.5

                critical_count = sum([fall_detected, fall_predicted, drowsiness_detected])
                annotated_frame = frame_rgb.copy()

                annotated_frame = draw_french_text(
                    annotated_frame,
                    f"D√©tection Chute: {'OUI' if fall_detected else 'NON'}",
                    (20, 40),
                    color=(0, 255, 0) if not fall_detected else (0, 0, 255)
                )
                annotated_frame = draw_french_text(
                    annotated_frame,
                    f"Pr√©diction Chute: {'PROBABLE' if fall_predicted else 'PEU PROBABLE'}",
                    (20, 80),
                    color=(0, 255, 0) if not fall_predicted else (255, 255, 0)
                )
                annotated_frame = draw_french_text(
                    annotated_frame,
                    f"Somnolence: {'D√âTECT√âE' if drowsiness_detected else 'NON D√âTECT√âE'}",
                    (20, 120),
                    color=(0, 255, 0) if not drowsiness_detected else (255, 0, 255)
                )

            video_placeholder.image(annotated_frame, channels="RGB")

        cap.release()
        cv2.destroyAllWindows()

----

D√©tail technique du code
========================

Imports et configuration initiale
--------------------------------
.. code-block:: python

    import streamlit as st
    import torch
    import cv2
    import tensorflow as tf
    import numpy as np
    from tensorflow.keras.layers import (
        BatchNormalization, Conv2D, MaxPooling2D, Dense,
        Flatten, Dropout, Activation
    )
    import time
    from PIL import Image, ImageDraw, ImageFont

Ces biblioth√®ques permettent de :
- G√©rer l‚Äôinterface (Streamlit),
- Manipuler les mod√®les IA (Torch, TensorFlow),
- Capturer et traiter la vid√©o (OpenCV),
- Manipuler les images (PIL),
- G√©rer les calculs num√©riques (Numpy),
- Contr√¥ler le temps (time).

----

Configuration de la page Streamlit
---------------------------------
.. code-block:: python

    st.set_page_config(
        layout="wide",
        page_title="Surveillance Intelligente",
        page_icon="üëÅÔ∏è"
    )

Configure l‚Äôinterface web :
- Affiche la page en mode large,
- D√©finit le titre et l‚Äôic√¥ne de l‚Äôonglet navigateur.

----

Patch pour compatibilit√© Torch
------------------------------
.. code-block:: python

    if not hasattr(torch.classes, "__path__"):
        torch.classes.__path__ = []

Corrige un bug potentiel li√© √† la gestion des classes Torch dans Streamlit.

----

Injection de styles CSS personnalis√©s
-------------------------------------
.. code-block:: python

    def inject_custom_css():
        st.markdown(\"\"\"
        <style>
            .stApp {
                background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            }
            .stButton>button {
                border: 2px solid #4a90e2;
                border-radius: 20px;
                color: white;
                background: linear-gradient(45deg, #4a90e2, #8b6df2);
                padding: 10px 24px;
                margin: 10px 0;
                width: 100%;
                transition: all 0.3s ease;
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            }
            .stButton>button:hover {
                transform: translateY(-3px);
                box-shadow: 0 6px 8px rgba(0,0,0,0.15);
                background: linear-gradient(45deg, #3a7bd5, #7b5dd3);
            }
        </style>
        \"\"\", unsafe_allow_html=True)

Personnalise l‚Äôapparence avec un d√©grad√© de fond et des boutons stylis√©s.

----

Titre principal et message de bienvenue
---------------------------------------
.. code-block:: python

    inject_custom_css()
    st.title(" Syst√®me de Surveillance Intelligente")
    st.markdown("Bienvenue √† notre application de surveillance intelligente qui combine d√©tection, pr√©diction de chute et suivi de somnolence en temps r√©el.")

Affiche le titre de l‚Äôapplication et un message de bienvenue.

----

Fonction pour √©crire du texte en fran√ßais sur les images
--------------------------------------------------------
.. code-block:: python

    def draw_french_text(img, text, position, font_scale=0.7, color=(255, 255, 255), thickness=2):
        img_pil = Image.fromarray(img)
        draw = ImageDraw.Draw(img_pil)
        try:
            font_size = int(font_scale * 30)
            try:
                font = ImageFont.truetype("arial.ttf", font_size)
            except:
                try:
                    font = ImageFont.truetype("DejaVuSans.ttf", font_size)
                except:
                    font = ImageFont.load_default()
        except:
            font = ImageFont.load_default()
        if isinstance(color, tuple) and len(color) == 3:
            color = color[::-1]
        draw.text(position, text, font=font, fill=color)
        return np.array(img_pil)

Cette fonction utilise PIL pour dessiner du texte avec accents, ce qui est utile pour les messages en fran√ßais.

----

Correction BatchNormalization Keras
----------------------------------
.. code-block:: python

    class FixedBatchNormalization(BatchNormalization):
        @classmethod
        def from_config(cls, config):
            if isinstance(config.get('axis'), list):
                config['axis'] = config['axis'][0]
            return super().from_config(config)

Adapte la classe BatchNormalization pour √©viter des erreurs lors du chargement des mod√®les.

----

Chargement des mod√®les IA
-------------------------
.. code-block:: python

    @st.cache_resource
    def load_models():
        fall_detection = torch.hub.load(
            'ultralytics/yolov5', 'custom',
            path='path_to_yolov5_weights.pt',
            force_reload=True
        )
        fall_prediction = tf.keras.models.load_model(
            'path_to_fall_prediction_model.keras',
            custom_objects={"BatchNormalization": FixedBatchNormalization}
        )
        drowsiness = tf.keras.models.load_model(
            'path_to_drowsiness_model.keras',
            custom_objects={"BatchNormalization": FixedBatchNormalization}
        )
        return fall_detection, fall_prediction, drowsiness

Charge et met en cache les trois mod√®les pour la d√©tection chute, la pr√©diction chute et la somnolence.

----

Interface utilisateur dans la sidebar
-------------------------------------
.. code-block:: python

    st.sidebar.header("Configuration")
    with st.sidebar:
        model_choice = st.radio(
            "Mode de surveillance",
            ["D√©tection Chute", "Pr√©diction Chute", "D√©tection Somnolence", "Surveillance Combin√©e"],
            index=3
        )
        alert_threshold = st.slider("Seuil d'alerte", 1, 3, 2)
        if st.button(" D√©marrer la surveillance"):
            st.session_state.run_detection = True
        if st.button("Arr√™ter"):
            st.session_state.run_detection = False

Permet √† l‚Äôutilisateur de configurer :
- Le mode d‚Äôanalyse,
- Le seuil d‚Äôalerte,
- D√©marrer ou arr√™ter la surveillance.

----

Capture vid√©o et boucle principale
---------------------------------
.. code-block:: python

    if st.session_state.run_detection:
        cap = cv2.VideoCapture(0)
        last_time = time.time()

        while st.session_state.run_detection:
            ret, frame = cap.read()
            if not ret:
                status_text.warning("Probl√®me de flux vid√©o")
                break

Ouvre la cam√©ra et commence √† lire les images vid√©o en boucle.

----

Calcul des FPS
-------------
.. code-block:: python

    current_time = time.time()
    fps = 1 / (current_time - last_time)
    last_time = current_time

Calcule la vitesse d‚Äôaffichage en images par seconde.

----

Traitement selon le mode choisi
------------------------------
En fonction du mode, l‚Äôimage est trait√©e par le mod√®le correspondant :

- **D√©tection Chute :** YOLOv5 analyse l‚Äôimage pour d√©tecter les chutes.
- **Pr√©diction Chute :** le mod√®le TensorFlow pr√©dit le risque de chute.
- **D√©tection Somnolence :** le mod√®le TensorFlow d√©tecte la somnolence.
- **Surveillance Combin√©e :** combine les trois mod√®les et affiche les r√©sultats en superposition.

Les r√©sultats sont annot√©s sur l‚Äôimage affich√©e en temps r√©el.

----

Affichage du flux vid√©o annot√©
------------------------------
.. code-block:: python

    video_placeholder.image(annotated_frame, channels="RGB")

Streamlit affiche la vid√©o avec les annotations en direct.

----

Lib√©ration des ressources
-------------------------
.. code-block:: python

    cap.release()
    cv2.destroyAllWindows()

Lib√®re la cam√©ra et ferme toutes les fen√™tres √† la fin de la surveillance.

----
