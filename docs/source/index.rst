.. Mon Projet documentation master file

Bienvenue √† la documentation du projet
======================================

Syst√®me de Surveillance Intelligent
-----------------------------------

.. contents::
   :depth: 3
   :local:

.. _introduction:

Introduction
============

**Objectif du Projet**

Ce projet consiste √† d√©velopper un **syst√®me de surveillance intelligent** bas√© sur la **vision par ordinateur**, visant √† assurer la s√©curit√© des personnes vuln√©rables (telles que les personnes √¢g√©es ou les patients) √† l‚Äôaide de trois mod√®les d‚Äôintelligence artificielle compl√©mentaires.

----

1. **D√©tection de chutes** (YOLOv5) : Identifie les chutes en temps r√©el √† partir d'un flux vid√©o.  
2. **Pr√©diction de chutes** (LSTM + CNN) : Anticipe les risques de chute en analysant les s√©quences temporelles (*LSTM*) et les motifs spatiaux (*CNN*).  
3. **D√©tection de somnolence** (CNN) : Rep√®re les signes de fatigue (yeux ferm√©s, t√™te pench√©e).  

----

Approche Technique
==================

Avant de plonger dans les d√©tails des mod√®les, nous commen√ßons par le **pr√©traitement des donn√©es**, √©tape cruciale pour garantir des pr√©dictions fiables. Nos donn√©es (vid√©os et images annot√©es) sont :

Pr√©traitement des donn√©es
-------------------------

- **Normalisation**  
  ‚àô Redimensionnement des images  
  ‚àô Ajustement de la luminosit√© et contraste  
  ‚àô Normalisation des valeurs pixel [0-1]

- **Augmentation**  
  ‚àô Rotation al√©atoire (¬±15¬∞)  
  ‚àô Flip horizontal  
  ‚àô Variation de saturation  

- **Structuration**  
  ‚àô D√©coupage en s√©quences de 30 frames  
  ‚àô Pas temporel de 5 images  
  ‚àô Format (s√©quences, hauteur, largeur, canaux)

----

Objectif : Am√©liorer la s√©curit√© et la qualit√© de vie des personnes √¢g√©es.

----

Description du Projet
=====================

Solution de surveillance **non intrusive** combinant :

- Mod√®les d'IA sp√©cialis√©s  
- D√©tection en temps r√©el  
- Alertes imm√©diates  

----

Fonctionnalit√©s Principales
===========================

.. list-table::
   :widths: 30 70
   :header-rows: 0

   * - üîπ **D√©tection de Somnolence**
     - Analyse des yeux (EAR) et bouche (MAR) - Classification Actif/Somnolent
   * - üîπ **Pr√©diction de Chute**
     - Analyse vid√©o pr√©ventive - Mod√®les s√©quentiels
   * - üîπ **D√©tection de Chute**
     - YOLOv5 pour identification imm√©diate - Alertes visuelles/sonores
   * - üîπ **Interface Utilisateur**
     - Application Streamlit avec modes Vid√©o/Live

----

Structure du Projet
==================

.. code-block:: bash

   ‚îú‚îÄ‚îÄ app.py                      # Interface principale Streamlit  
   ‚îú‚îÄ‚îÄ main.py                     # Point d'entr√©e principal  
   ‚îú‚îÄ‚îÄ models/                     # Mod√®les entra√Æn√©s  
   ‚îÇ   ‚îú‚îÄ‚îÄ yolov5_fall.pt          # D√©tection de chutes (YOLOv5)  
   ‚îÇ   ‚îú‚îÄ‚îÄ drowsiness_model.h5     # D√©tection de somnolence  
   ‚îÇ   ‚îî‚îÄ‚îÄ fall_prediction.h5      # Pr√©diction de chute  
   ‚îú‚îÄ‚îÄ notebooks/                  # Notebooks pour entra√Ænement et tests  
   ‚îÇ   ‚îú‚îÄ‚îÄ train_drowsiness.ipynb  
   ‚îÇ   ‚îú‚îÄ‚îÄ train_fall_prediction.ipynb  
   ‚îÇ   ‚îî‚îÄ‚îÄ test_yolov5.ipynb  
   ‚îú‚îÄ‚îÄ utils/                      # Utilitaires  
   ‚îÇ   ‚îî‚îÄ‚îÄ alert.mp3               # Son d'alerte  
   ‚îú‚îÄ‚îÄ README.md                   # Documentation  
   ‚îî‚îÄ‚îÄ requirements.txt            # D√©pendances du projet    

----

Configuration des Mod√®les
=========================

.. toctree::
   :maxdepth: 2
   :caption: Configuration d√©taill√©e des mod√®les

   configurations/detection_somnolence
   configurations/prediction_chute
   configurations/detection_chute

----

Installation des Packages
=========================

Installation des Packages Essentiels
------------------------------------

**Mod√®le de d√©tection de somnolence**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Les installations suivantes sont cruciales pour assurer le bon fonctionnement du **mod√®le de d√©tection de somnolence**. Elles couvrent la r√©cup√©ration des donn√©es, le traitement d‚Äôimage, l‚Äôanalyse statistique et les mod√®les machine learning.

Installation Globale
-------------------

Pour installer tous les packages n√©cessaires, vous pouvez ex√©cuter :  

.. code-block:: bash

   pip uninstall -y mediapipe
   pip install mediapipe==0.10.7 opencv-python numpy matplotlib pandas scikit-learn xgboost python-docx python-pptx kagglehub

Importations Utilis√©es
---------------------

Une fois les packages install√©s, nous les utilisons via les importations suivantes :  

.. code-block:: python

   import mediapipe as mp
   import cv2
   import numpy as np
   import matplotlib.pyplot as plt
   import os
   import pandas as pd
   import shutil
   import pickle
   import sklearn
   from sklearn.model_selection import train_test_split
   from sklearn.pipeline import make_pipeline
   from sklearn.preprocessing import StandardScaler
   from sklearn.svm import SVC
   from sklearn.ensemble import RandomForestClassifier
   from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_curve, roc_auc_score, precision_recall_curve, classification_report, confusion_matrix
   import xgboost as xgb
   from docx import Document
   from pptx import Presentation
   from pptx.util import Inches

R√¥le des Packages
----------------

- **mediapipe** : D√©tection et suivi des rep√®res faciaux.  
- **opencv (cv2)** : Traitement vid√©o et image.  
- **numpy** : Calcul num√©rique.  
- **matplotlib** : Visualisation de donn√©es et courbes.  
- **pandas** : Manipulation et analyse de donn√©es tabulaires.  
- **shutil** : Manipulation des fichiers et r√©pertoires.  
- **pickle** : S√©rialisation et sauvegarde d‚Äôobjets Python.  
- **scikit-learn (sklearn)** : Pr√©traitement, mod√®les SVM/RandomForest, m√©triques.  
- **xgboost** : Mod√®les d‚Äôensemble performants pour la classification.  
- **python-docx** : Lecture et √©criture de documents Word.  
- **python-pptx** : Cr√©ation automatique de pr√©sentations PowerPoint.  
- **kagglehub** : T√©l√©chargement des datasets depuis Kaggle.

----

Mod√®le de Pr√©diction de Chute
==============================

Installation des Packages
-------------------------

Pour assurer le bon fonctionnement du mod√®le de pr√©diction de chute, plusieurs packages Python sont indispensables.  
Il est recommand√© d‚Äôinstaller ces packages via la commande suivante :

.. code-block:: bash

   pip install tensorflow scikit-learn matplotlib numpy keras networkx

Import des Packages
------------------

Les imports suivants sont utilis√©s dans le code du mod√®le de pr√©diction de chute :

.. code-block:: python

   import cv2
   import os
   import numpy as np
   from sklearn.model_selection import train_test_split
   from keras.utils import to_categorical
   from keras.models import Sequential
   from keras.layers import TimeDistributed, Conv2D, MaxPooling2D, Flatten, LSTM, Dense
   from keras.layers import Dropout, BatchNormalization, GlobalMaxPooling2D
   from keras.callbacks import EarlyStopping
   import matplotlib.pyplot as plt
   import networkx as nx
   from tensorflow.keras.models import Sequential
   from tensorflow.keras.layers import TimeDistributed, Conv2D, MaxPooling2D, LSTM, Dense
   from tensorflow.keras.layers import Dropout, BatchNormalization, GlobalMaxPooling2D
   from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau
   from tensorflow.keras.regularizers import l2
   from tensorflow.keras.optimizers import Adam
   from sklearn.utils import class_weight

Description des Packages
-----------------------

- **cv2 (OpenCV)** : Traitement d‚Äôimages et vid√©os, extraction et manipulation de frames.  
- **os** : Gestion des chemins de fichiers et interactions syst√®me.  
- **numpy** : Calculs num√©riques et manipulation de matrices.  
- **sklearn.model_selection.train_test_split** : Division des donn√©es en ensembles d‚Äôentra√Ænement et de test.  
- **keras.utils.to_categorical** : Conversion des labels en format one-hot encoding.  
- **keras.models.Sequential** : Construction s√©quentielle des couches du r√©seau de neurones.  
- **keras.layers (TimeDistributed, Conv2D, MaxPooling2D, Flatten, LSTM, Dense, Dropout, BatchNormalization, GlobalMaxPooling2D)** :  
  - TimeDistributed : Applique une couche √† chaque frame d‚Äôune s√©quence vid√©o.  
  - Conv2D, MaxPooling2D : Extraction de caract√©ristiques spatiales dans les images.  
  - Flatten : Aplatissement des tenseurs pour passer d‚Äôune couche convolutive √† une couche dense.  
  - LSTM : Capture la dynamique temporelle dans les s√©quences.  
  - Dense : Couche pleinement connect√©e.  
  - Dropout, BatchNormalization : Techniques de r√©gularisation pour am√©liorer la g√©n√©ralisation.  
  - GlobalMaxPooling2D : R√©duction dimensionnelle en conservant les informations importantes.  
- **keras.callbacks (EarlyStopping, ModelCheckpoint, ReduceLROnPlateau)** : Gestion dynamique de l‚Äôentra√Ænement.  
- **tensorflow.keras.optimizers.Adam** : Optimiseur performant pour l‚Äôentra√Ænement.  
- **sklearn.utils.class_weight** : Gestion des classes d√©s√©quilibr√©es.  
- **matplotlib.pyplot** : Visualisation des r√©sultats et courbes d‚Äôapprentissage.  
- **networkx** : Analyse graphique et manipulation des graphes, utile pour la visualisation des relations entre frames ou mouvements.

----

Mod√®le de D√©tection de Chute (YOLOv5)
=====================================

Installation et Importations
----------------------------

Le mod√®le YOLOv5 n√©cessite une installation sp√©cifique et des imports particuliers :

.. code-block:: bash

   pip install torch torchvision torchaudio
   pip install matplotlib numpy opencv-python

Imports essentiels dans le script :

.. code-block:: python

   import torch
   import cv2
   import numpy as np
   import matplotlib.pyplot as plt

----

R√©sum√© des packages
===================

| Fonctionnalit√©                    | Packages essentiels                               |
|---------------------------------|--------------------------------------------------|
| Vision par ordinateur            | opencv-python, mediapipe, matplotlib             |
| Mod√®les d‚Äôapprentissage profond | tensorflow, keras, torch, torchvision             |
| Pr√©traitement et analyse         | numpy, pandas, scikit-learn, xgboost               |
| Traitement vid√©o et images       | cv2, mediapipe                                    |
| Gestion fichiers et donn√©es      | os, shutil, pickle                                |
| Rapports et documentation        | python-docx, python-pptx                           |

----

Notes additionnelles
====================

- Veuillez v√©rifier les versions des packages pour √©viter les conflits.  
- Utilisez un environnement virtuel d√©di√© (venv ou conda).  
- En cas de probl√®mes li√©s √† mediapipe, tentez une d√©sinstallation/r√©installation avec la version recommand√©e (0.10.7).  
- Les notebooks pr√©sents dans le dossier `notebooks/` contiennent des exemples d‚Äôutilisation, entra√Ænement et tests des mod√®les.

----

Fin de la documentation
========================

Pour toute question ou contribution, merci de consulter le fichier README.md ou contacter l‚Äô√©quipe projet.

